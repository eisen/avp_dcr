//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: donut.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Donut_DonutWorldClient`, then call methods of this protocol to make API calls.
public protocol Donut_DonutWorldClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Donut_DonutWorldClientInterceptorFactoryProtocol? { get }

  func getPosition(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?,
    handler: @escaping (Donut_Xfrm) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Donut_Xfrm>

  func setPosition(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<Donut_Xfrm, SwiftProtobuf.Google_Protobuf_Empty>
}

extension Donut_DonutWorldClientProtocol {
  public var serviceName: String {
    return "donut.DonutWorld"
  }

  /// Server streaming call to GetPosition
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPosition.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func getPosition(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil,
    handler: @escaping (Donut_Xfrm) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Donut_Xfrm> {
    return self.makeServerStreamingCall(
      path: Donut_DonutWorldClientMetadata.Methods.getPosition.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPositionInterceptors() ?? [],
      handler: handler
    )
  }

  /// Client streaming call to SetPosition
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  public func setPosition(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<Donut_Xfrm, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeClientStreamingCall(
      path: Donut_DonutWorldClientMetadata.Methods.setPosition.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetPositionInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Donut_DonutWorldClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Donut_DonutWorldNIOClient")
public final class Donut_DonutWorldClient: Donut_DonutWorldClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Donut_DonutWorldClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Donut_DonutWorldClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the donut.DonutWorld service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Donut_DonutWorldClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Donut_DonutWorldNIOClient: Donut_DonutWorldClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Donut_DonutWorldClientInterceptorFactoryProtocol?

  /// Creates a client for the donut.DonutWorld service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Donut_DonutWorldClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Donut_DonutWorldAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Donut_DonutWorldClientInterceptorFactoryProtocol? { get }

  func makeGetPositionCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Donut_Xfrm>

  func makeSetPositionCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncClientStreamingCall<Donut_Xfrm, SwiftProtobuf.Google_Protobuf_Empty>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Donut_DonutWorldAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Donut_DonutWorldClientMetadata.serviceDescriptor
  }

  public var interceptors: Donut_DonutWorldClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetPositionCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Donut_Xfrm> {
    return self.makeAsyncServerStreamingCall(
      path: Donut_DonutWorldClientMetadata.Methods.getPosition.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPositionInterceptors() ?? []
    )
  }

  public func makeSetPositionCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncClientStreamingCall<Donut_Xfrm, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncClientStreamingCall(
      path: Donut_DonutWorldClientMetadata.Methods.setPosition.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetPositionInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Donut_DonutWorldAsyncClientProtocol {
  public func getPosition(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Donut_Xfrm> {
    return self.performAsyncServerStreamingCall(
      path: Donut_DonutWorldClientMetadata.Methods.getPosition.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPositionInterceptors() ?? []
    )
  }

  public func setPosition<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty where RequestStream: Sequence, RequestStream.Element == Donut_Xfrm {
    return try await self.performAsyncClientStreamingCall(
      path: Donut_DonutWorldClientMetadata.Methods.setPosition.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetPositionInterceptors() ?? []
    )
  }

  public func setPosition<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Donut_Xfrm {
    return try await self.performAsyncClientStreamingCall(
      path: Donut_DonutWorldClientMetadata.Methods.setPosition.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetPositionInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Donut_DonutWorldAsyncClient: Donut_DonutWorldAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Donut_DonutWorldClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Donut_DonutWorldClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Donut_DonutWorldClientInterceptorFactoryProtocol: Swift.Sendable {

  /// - Returns: Interceptors to use when invoking 'getPosition'.
  func makeGetPositionInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Donut_Xfrm>]

  /// - Returns: Interceptors to use when invoking 'setPosition'.
  func makeSetPositionInterceptors() -> [ClientInterceptor<Donut_Xfrm, SwiftProtobuf.Google_Protobuf_Empty>]
}

public enum Donut_DonutWorldClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "DonutWorld",
    fullName: "donut.DonutWorld",
    methods: [
      Donut_DonutWorldClientMetadata.Methods.getPosition,
      Donut_DonutWorldClientMetadata.Methods.setPosition,
    ]
  )

  public enum Methods {
    public static let getPosition = GRPCMethodDescriptor(
      name: "GetPosition",
      path: "/donut.DonutWorld/GetPosition",
      type: GRPCCallType.serverStreaming
    )

    public static let setPosition = GRPCMethodDescriptor(
      name: "SetPosition",
      path: "/donut.DonutWorld/SetPosition",
      type: GRPCCallType.clientStreaming
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Donut_DonutWorldProvider: CallHandlerProvider {
  var interceptors: Donut_DonutWorldServerInterceptorFactoryProtocol? { get }

  func getPosition(request: SwiftProtobuf.Google_Protobuf_Empty, context: StreamingResponseCallContext<Donut_Xfrm>) -> EventLoopFuture<GRPCStatus>

  func setPosition(context: UnaryResponseCallContext<SwiftProtobuf.Google_Protobuf_Empty>) -> EventLoopFuture<(StreamEvent<Donut_Xfrm>) -> Void>
}

extension Donut_DonutWorldProvider {
  public var serviceName: Substring {
    return Donut_DonutWorldServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetPosition":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Donut_Xfrm>(),
        interceptors: self.interceptors?.makeGetPositionInterceptors() ?? [],
        userFunction: self.getPosition(request:context:)
      )

    case "SetPosition":
      return ClientStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Donut_Xfrm>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeSetPositionInterceptors() ?? [],
        observerFactory: self.setPosition(context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Donut_DonutWorldAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Donut_DonutWorldServerInterceptorFactoryProtocol? { get }

  @Sendable func getPosition(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    responseStream: GRPCAsyncResponseStreamWriter<Donut_Xfrm>,
    context: GRPCAsyncServerCallContext
  ) async throws

  @Sendable func setPosition(
    requestStream: GRPCAsyncRequestStream<Donut_Xfrm>,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Donut_DonutWorldAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Donut_DonutWorldServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Donut_DonutWorldServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Donut_DonutWorldServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetPosition":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Donut_Xfrm>(),
        interceptors: self.interceptors?.makeGetPositionInterceptors() ?? [],
        wrapping: self.getPosition(request:responseStream:context:)
      )

    case "SetPosition":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Donut_Xfrm>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeSetPositionInterceptors() ?? [],
        wrapping: self.setPosition(requestStream:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

public protocol Donut_DonutWorldServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getPosition'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPositionInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Donut_Xfrm>]

  /// - Returns: Interceptors to use when handling 'setPosition'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetPositionInterceptors() -> [ServerInterceptor<Donut_Xfrm, SwiftProtobuf.Google_Protobuf_Empty>]
}

public enum Donut_DonutWorldServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "DonutWorld",
    fullName: "donut.DonutWorld",
    methods: [
      Donut_DonutWorldServerMetadata.Methods.getPosition,
      Donut_DonutWorldServerMetadata.Methods.setPosition,
    ]
  )

  public enum Methods {
    public static let getPosition = GRPCMethodDescriptor(
      name: "GetPosition",
      path: "/donut.DonutWorld/GetPosition",
      type: GRPCCallType.serverStreaming
    )

    public static let setPosition = GRPCMethodDescriptor(
      name: "SetPosition",
      path: "/donut.DonutWorld/SetPosition",
      type: GRPCCallType.clientStreaming
    )
  }
}
